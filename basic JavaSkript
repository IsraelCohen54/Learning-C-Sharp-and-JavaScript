// JavaScript does not have the concept of "static" variables, so this declaration is not needed
// The equivalent to a C# boolean function in JavaScript is a regular function that returns a boolean value
function learnStatement(i) {
  // In JavaScript, the equivalent of the C# "if" statement is the same
  if (i !== 0) {
    // In JavaScript, the equivalent of the C# "switch" statement is the "switch" statement
    switch (i) {
      default:
        console.log("default switch case");
        return false;
      case 1:
        console.log("case 1, i = 1");
        break;
      case 2:
        console.log("case 2, i = 2");
        return false;
    }
  }
  return true;
}

// In JavaScript, there is no equivalent of C#'s "static" keyword
// For dynamic arrays, you can use JavaScript arrays with the push() and splice() methods
function learnCollections() {
  // Static arrays can be declared using an array literal
  var arrayEx1 = new Array(5).fill(0); // an array of 5 elements, all with value 0
  var arrayEx2 = [1, 2, 3]; // an array with 3 elements, with the specified values

  // Dynamic arrays can be declared using an array literal and adding elements using the push() method
  var intList = [1, 2];
  var intListWithoutArgs = [1, 2];
  console.log(intListWithoutArgs.join(", ")); // printing the array as a string, separated by comma

  // In JavaScript, the equivalent of the C# "foreach" loop is the "for...of" loop
  for (var element of intListWithoutArgs) {
    console.log(element + ", ");
  }
  console.log("\n");

  // Looping through an array and printing the index and value
  for (var j = 0; j < intList.length; j++) {
    console.log("index: " + j + " value: " + intList[j]);
  }
  console.log("\n");

  // Adding an element to the end of the array
  intList.push(0);

  // Removing an element from the array
  var index = intListWithoutArgs.indexOf(1);
  if (index !== -1) {
    intListWithoutArgs.splice(index, 1);
  }
}

//basic vid summation: ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
console.log("Welcome to JavaScript!"); //print to console, allert print to web
//variables:
//~numbers
var num1 = 1
var num2 = 2
alert(num1+num2); // output 3
alert('res:'+'1'+'2'+' before was: '+3); //output 12 - string concatination
//~string began with a letter or _ or $, Case sensitive.
//syntex:
var myNumber; //camel case:
var MyFavorieNumber; //partial case
var my_number; //underscore

//Data Types
//~Arrays:
var colors_1 = ['red','blue','green']; //array indexed 0 1 2
alert(colors_1); //print all
alert(colors_1[1]); //blue
//another way to define array:
var colors_2 = new Array('red','yellow','orange');
//array assignment:
colors_2[2]='green';
alert(colors_2[2]); //green

//adding to array:
colors_1.push('purple'); //pushed to end of array
//array can contain multyple types together:
var numbers_1 = [1,2,'three',0];
alert(numbers_1.lenght); //3 - 3 var in array
alert(numbers_1.sort()); //sort by left most letter
alert(numbers_1.reverse()); //sort by reverse order
//Loops
for(var i = 0; i<3;i++){
    console.log('i value inside for loop: '+i);
}
var i=3;
while(i<6){
    console.log("while loop: " +i)
    i++;
}
var numbers_2=[1,7,5,22,465,0,0.5];
numbers_2.forEach(function(numbers_2){console.log("foreach "+numbers_2)});

//Conditionals - If Statements, switches
var one=1;
var two=2;
if(one!=two && one==1){ //!= ||, &&, <=...
    console.log('this is true'); //=== meaning each datatype has to match
} else { console.log('this is false'); 
}
var fruit = 'banana';
switch(fruit){
    case "banana":
    alert('I have banana');
    break;
    case "apple":
        alert('I love apple');
        break;
    default:
        alert('I love all other fruits');
        break;
}
//Object Literal + Functions:
var person = {
    firstName: 'Bred',
    lastName: 'Traversy',
    age:50,
    children:['dan','sara'],
    adress:{
        street:'555 somewhere st',
        city:'Jerusalem',
        state:'Is'
    },
    fullName: function(){
        return this.firstName +" "+this.lastName;
    }
}
console.log(person.fullName());
//Object constructor
var apple = new Object();
apple.color='red';
apple.shape = 'round';
apple.describe = function(){
    return 'An apple is the color '+this.color+' and is the shape '+this.shape;
}
console.log(apple.describe());
    
//but if we want many fruit, we dont want to do this for each one, hence:
//constructor Pattern:
function Fruit(name, color,shape){
    this.name = name;
    this.color=color;
    this.shape=shape;
    this.describe=function(){
        return "name: "+this.name +" color: "+ this.color +" shape: "+this.shape;
    }
}
var apple2 = new Fruit('apple', 'red','round');
var banana2 = new Fruit('banana', 'yellow','crescent');
console.log(apple2);
console.log("apple2.name: "+apple2.name);
console.log("apple2.describe (function): "+apple2.describe());

var users = [
    {
        name:'John Doe',
        age: 30
    },
    {
        name:'Mark Smith',
        age: 44
    }
    ];
console.log(users[0].name);
//Events
//with interactive web:
/*<div class="container">
//doClick - a function below...
<button onclick="doClick()">Click me</button>
//another option:
<button onclick="this.innerHTML='You Clicked!'">Click me</button>
//nicer option (?):
<button onclick="changeText(this)">Click me</button>
//or
<button onclick="changeText()">Click me</button>
</div>
function doClick(){
    alert('You Clicked!'); }
function changeText(id){
    id.innerHTML = 'You Clicked!';
function changeText(){ //changing the header
    var heading = document.getElrmentById('heading');
    heading.innerHTML = 'You Clicked!';
    // some more at https://www.youtube.com/watch?v=vEROU2XtPR8 55[m]+
    // some more of Forms & Validation see also..
}
*/
//basic vid summation: ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

//Classes in JavaScript

//A class is a blueprint for creating objects (a particular data structure), providing initial values for state (member variables or attributes), and implementations of behavior (member functions or methods).

class Animal {
  //Attributes/Properties
  constructor(name, type) {
    this.name = name;
    this.type = type;
  }
  
  //Methods
  getName() {
    return this.name;
  }
  
  getType() {
    return this.type;
  }
}

//Inheritance in JavaScript

//Inheritance is a way to create a new class that is a modified version of an existing class. The new class is called the subclass, and the existing class is the superclass.

class Mammal extends Animal {
  constructor(name, type, isWarmBlooded) {
    super(name, type);
    this.isWarmBlooded = isWarmBlooded;
  }
  
  getIsWarmBlooded() {
    return this.isWarmBlooded;
  }
}

//Event Handlers in JavaScript

//An event handler is a function that you define in your script and attach to an element using JavaScript code. When an event occurs on an element, such as a button click, the event handler will be executed.

//For example, the following code will change the text of a button when it's clicked:

document.getElementById("myButton").addEventListener("click", function() {
  document.getElementById("myButton").innerHTML = "Button was clicked";
});

//Using Classes in JavaScript

const animal = new Animal("Tiger", "Carnivore");
console.log(animal.getName()); // Output: Tiger
console.log(animal.getType()); // Output: Carnivore

const mammal = new Mammal("Elephant", "Herbivore", true);
console.log(mammal.getName()); // Output: Elephant
console.log(mammal.getType()); // Output: Herbivore
console.log(mammal.getIsWarmBlooded()); // Output: true

//Polymorphism in JavaScript

//Polymorphism allows you to call the same method on different objects, and each object will behave differently based on its implementation of that method.

//This can be achieved in JavaScript by using prototypes. For example:

Animal.prototype.makeSound = function() {
  console.log(`${this.name} makes a sound`);
};

Mammal.prototype.makeSound = function() {
  console.log(`${this.name} makes a growl sound`);
};

const animal2 = new Animal("Lion", "Carnivore");
const mammal2 = new Mammal("Gorilla", "Herbivore", true);

animal2.makeSound(); // Output: Lion makes a sound
mammal2.makeSound(); // Output: Gorilla makes a growl sound

// ~~~ //
//~~~~~~~~~~~~~~~~~~ polymorphism example without prototype ~~~~~
class Animal {
  constructor(name) {
    this.name = name;
  }
  
  makeSound() {
    console.log(`${this.name} makes a sound`);
  }
}

class Dog extends Animal {
  makeSound() {
    console.log(`${this.name} barks`);
  }
}

class Cat extends Animal {
  makeSound() {
    console.log(`${this.name} meows`);
  }
}

const dog = new Dog("Rufus");
const cat = new Cat("Whiskers");

dog.makeSound(); // Output: Rufus barks
cat.makeSound(); // Output: Whiskers meows

//~~~~~~~~~~~~ polymorphism + interface example without prototype ~~~~~
interface Animal {
  makeSound(): void;
}

class Dog implements Animal {
  makeSound() {
    console.log(`Dog barks`);
  }
}

class Cat implements Animal {
  makeSound() {
    console.log(`Cat meows`);
  }
}

const dog = new Dog();
const cat = new Cat();

dog.makeSound(); // Output: Dog barks
cat.makeSound(); // Output: Cat meows

/*In the last two examples,
the makeSound method is called on objects of different classes,
and each object behaves differently based on its implementation of the method.
This is the essence of polymorphism.*/
